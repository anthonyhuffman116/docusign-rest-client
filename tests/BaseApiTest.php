<?php

namespace Docusign\Rest\Tests;

use DocuSign\Rest\Api\BaseApi;
use DocuSign\Rest\Client;
use Exception;
use PHPUnit\Framework\TestCase;

class BaseApiTest extends TestCase
{
    /**
     * @var Client
     */
    protected $client;

    public function setUp(): void
    {
        $this->client = new Client;
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @param string $class
     * @dataProvider apiProxyClassDataProvider
     */
    public function testProxiedApisProxyCorrectApi($class): void
    {
        $this->assertTrue(
            \class_exists($class),
            "$class returned from DocusignClassUtils::getApiProxyClasses() but does not exist!"
        );

        /** @var BaseApi $instance */
        $instance = new $class($this->client);
        $docusignApiInstance = $instance->getApiClass();

        $this->assertTrue(
            \class_exists($docusignApiInstance),
            "Docusign classed [$docusignApiInstance] from proxy class [$class] does not exist!"
        );
    }

    /**
     * @param string $docusignApiClass
     * @param string[] $proxyClasses
     * @dataProvider allDocusignApisAreProxiedDataProvider
     */
    public function testAllDocusignApisAreProxied($docusignApiClass, $proxyClasses): void
    {
        $this->assertContains($docusignApiClass, $proxyClasses);
    }

    public function testAccountIdGetsInjected(): void
    {
        $testApi = new class(new class extends Client {
            // Force false authentication so we don't try to authenticate again
            protected $authenticated = true;
            protected $account_id = 'ACCOUNT_ID';
        }) extends BaseApi {
            protected $methodsWithAccountId = ['needsAccountId'];

            public function getClient()
            {
                return new class {
                    public function needsAccountId($account_id)
                    {
                        return $account_id;
                    }

                    public function doesntNeedAccountId($account_id = null)
                    {
                        return $account_id;
                    }
                };
            }
        };

        $this->assertEquals($testApi->needsAccountId(), 'ACCOUNT_ID');
        $this->assertNull($testApi->doesntNeedAccountId());
    }

    /**
     * @return array ['DocusignApiClassString', ['array of proxied api classes']]
     */
    public function allDocusignApisAreProxiedDataProvider()
    {
        $client = new Client;

        // Get get proxied list of classes from the proxies themselves
        $proxiedClasses = \array_map(static function ($class) use ($client) {
            return (new $class($client))->getApiClass();
        }, ClassUtils::getApiProxyClasses());

        // Then we can verify EACH proxy from Docusign has a matching proxy class that has been returned from the proxy.
        return array_map(static function ($class) use ($proxiedClasses) {
            return [$class, $proxiedClasses];
        }, ClassUtils::getDocusignApiClasses());
    }

    public function apiProxyClassDataProvider()
    {
        return array_map(static function ($class) {
            return [$class];
        }, ClassUtils::getApiProxyClasses());
    }
}